version: '3.8'

services:
  trage-agent:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: trage-agent
    restart: unless-stopped
    environment:
      - LOG_LEVEL=INFO
      - CONFIG_FILE=/app/trae_config.yaml
      # 设置API密钥（生产环境应使用secrets）
      - OPENAI_API_KEY=${OPENAI_API_KEY:-your_openai_api_key}
      - DOUBAO_API_KEY=${DOUBAO_API_KEY:-your_doubao_api_key}
    volumes:
      # 挂载配置文件
      - ./trae_config.yaml:/app/trae_config.yaml:ro
      # 挂载日志目录
      - ./logs:/app/logs
      # 挂载缓存目录
      - ./cache:/app/cache
    ports:
      - "8080:8080"
    networks:
      - trage-network
    healthcheck:
      test: ["./trage-cli", "--help"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # 可选：Redis缓存服务
  redis:
    image: redis:7-alpine
    container_name: trage-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - trage-network
    command: redis-server --appendonly yes

  # 可选：Prometheus监控
  prometheus:
    image: prom/prometheus:latest
    container_name: trage-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - trage-network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'

  # 可选：Grafana仪表板
  grafana:
    image: grafana/grafana:latest
    container_name: trage-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - trage-network

volumes:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  trage-network:
    driver: bridge
